<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:local="clr-namespace:HIO.Controls" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    mc:Ignorable="d">
    <!--xmlns:Controls="System.Windows.Controls.Primitives"-->
    <!--xmlns:Controls="clr-namespace:Microsoft.VisualStudio.DesignTools.Utility.Controls;assembly=Microsoft.VisualStudio.DesignTools.Utility"-->

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" 
                               SnapsToDevicePixels="true" 
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                               StrokeThickness="1" 
                               StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<SolidColorBrush x:Key="ComboBox.Static.Background" Color="Transparent"/>-->
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFD0D0D0"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Forground" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="White"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF93b9c2"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFC17871"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#B2C17871"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF6A6A6A"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFFCDDC4" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF646464"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FF4B4B4B"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF666666"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFFCC4C4" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF767676"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FFA9A9A9"/>
    <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>

    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" 
                            BorderBrush="Transparent" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="Transparent" 
                            SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" 
                                BorderBrush="Transparent" 
                                BorderThickness="1" 
                                HorizontalAlignment="Right"
                                Margin="0" 
                                SnapsToDevicePixels="true" 
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" 
                                  Fill="{DynamicResource HIOBrightFont}" 
                                  Opacity="0.5"
                                  HorizontalAlignment="Center" 
                                  Margin="0" 
                                  VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>-->
                            <!--<Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>-->
                            <!--<Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="Gray"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" 
                                           Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" 
                                    Value="{StaticResource ComboBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" 
                                    Value="{StaticResource ComboBox.Disabled.Border}"/>-->
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" 
                                           Value="false"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" 
                                           Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!--<Setter Property="Background" TargetName="templateRoot" 
                                    Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" 
                                    Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                            <Setter Property="Background" TargetName="splitBorder" 
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                            <Setter Property="BorderBrush" TargetName="splitBorder" 
                                    Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>-->
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type local:TComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                  Width="0"/>
            </Grid.ColumnDefinitions>
            
            <ToggleButton x:Name="toggleButton" 
                          BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Background="{TemplateBinding Background}" 
                          Grid.ColumnSpan="2" 
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                          Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}" 
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsHitTestVisible="false" 
                              Margin="{TemplateBinding Padding}" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <TextBlock Text="{TemplateBinding Placeholder}"
                                           Margin="5,4,0,0"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Focusable="False"
                                           IsHitTestVisible="False"
                                           Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:TComboBox}},Path=Text,Converter={local:TTextLengthToVisibilityConverter Reverse=True}}"
                                           Foreground="{TemplateBinding Foreground}"
                                           Opacity="0.5"/>
            <Popup x:Name="PART_Popup" 
                   AllowsTransparency="True" 
                   Grid.ColumnSpan="2" 
                   PlacementTarget="{Binding ElementName=templateRoot}"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   Margin="1" 
                   VerticalOffset="11"
                   PopupAnimation="Fade" 
                   Placement="Bottom">
                <!--<Themes:SystemDropShadowChrome x:Name="shadow" 
                                               Color="Transparent" 
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                               MinWidth="{Binding ActualWidth, ElementName=templateRoot}">-->
                <Border x:Name="dropDownBorder" 
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                        BorderBrush="Transparent" 
                        BorderThickness="1"
                        Margin="30"
                        Padding="20,10"
                        Background="White">
                    <Border.Effect>
                        <!--<DropShadowEffect ShadowDepth="0" BlurRadius="30" Opacity="0.3"/>-->
                        <DropShadowEffect ShadowDepth="0" BlurRadius="40" Opacity="0.05"/>
                    </Border.Effect>
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <Canvas x:Name="canvas" 
                                        HorizontalAlignment="Left" 
                                        Height="0" 
                                        VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="opaqueRect" 
                                               Fill="{Binding Background, ElementName=dropDownBorder}" 
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>
                </Border>
                <!--</Themes:SystemDropShadowChrome>-->
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <!--<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>-->
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="CaretBrush" Value="{Binding Path=CaretBrush,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:TComboBox}}}"/>
        <Setter Property="Background" Value="{Binding Path=Background,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:TComboBox}}}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" 
                                  Background="{TemplateBinding Background}"
                                  Foreground="{TemplateBinding Foreground}"
                                  Focusable="false" 
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

    <Style TargetType="{x:Type local:TComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="CaretBrush" Value="White"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <SolidColorBrush x:Key="ListItemForegroundBrush" Color="#FFA9A9A9"/>
    <SolidColorBrush x:Key="ListItemHighlightForegroundBrush" Color="#FFA9A9A9"/>
    <SolidColorBrush x:Key="ListItemHighlightBorderBrush" Color="#FFA9A9A9"/>
    <SolidColorBrush x:Key="ListItemHighlightBackgroundBrush" Color="WhiteSmoke"/>



    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource HIOBrightFont}"/>
        <Setter Property="Padding" Value="3,1"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <DockPanel>
                        <Separator x:Name="Separator" DockPanel.Dock="Top" Margin="5,0" Background="{DynamicResource HIOLineBright}"/>
                        <Border Name="Border" 
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}" 
                            BorderThickness="1"
                            Margin="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="true" 
                            MinHeight="{TemplateBinding MinHeight}">

                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Separator" Value="Collapsed"/>
                        </DataTrigger>
                        <Trigger Property="IsHighlighted" Value="true">
                            <!--<Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemHighlightBackgroundBrush}"/>-->
                            <Setter Property="Foreground" Value="{DynamicResource HIODarkFont}"/>
                            <!--<Setter Property="Background" Value="{DynamicResource ListItemHighlightBackgroundBrush}"/>-->
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource ListItemHighlightBorderBrush}"/>-->
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Popup}}}" Value="False"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}"/>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--<Style x:Key="jafar" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3,1"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource GenericFocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="ListBoxItemRoot" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}" >
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                  Content="{TemplateBinding Content}" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource ListItemHighlightForegroundBrush}"/>
                <Setter Property="Background" Value="{DynamicResource ListItemHighlightBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ListItemHighlightBorderBrush}"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Popup}}}" Value="False"/>
                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Popup}}}" Value="True"/>
                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ComboBox}}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ListItemForegroundBrush}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource ListItemDisabledForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>

    </Style>-->



    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type local:TComboBox}">
        <Border x:Name="border" 
                UseLayoutRounding="True"
                Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0,0,0,1"
                    Margin="{TemplateBinding BorderThickness}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                  Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" 
                       AllowsTransparency="true" 
                       Grid.ColumnSpan="2" 
                       IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                       PopupAnimation="Fade"
                       VerticalOffset="0"
                       MinHeight="0"
                       Placement="Bottom">
                    <!--<Themes:SystemDropShadowChrome x:Name="shadow" 
                                               Color="Transparent" 
                                               >
                    </Themes:SystemDropShadowChrome>-->
                    <Border x:Name="dropDownBorder" 
                            BorderBrush="Transparent" 
                            BorderThickness="1" 
                            MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                            MinWidth="{Binding ActualWidth, ElementName=border}"
                            Margin="50"
                            Padding="20"
                            MinHeight="0"
                            Background="White"
                            >
                        <Border.Effect>
                            <!--<DropShadowEffect ShadowDepth="0" BlurRadius="30" Opacity="0.3"/>-->
                            <DropShadowEffect ShadowDepth="0" BlurRadius="30" Opacity="0.08" />
                        </Border.Effect>
                        <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Hidden">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" 
                                        HorizontalAlignment="Left" 
                                        Height="0" 
                                        VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" 
                                               Fill="{Binding Background, ElementName=dropDownBorder}" 
                                               Height="{Binding ActualHeight, ElementName=dropDownBorder}" 
                                               Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>

                </Popup>
                <ToggleButton x:Name="toggleButton" 
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}" 
                          Background="{TemplateBinding Background}" 
                          Visibility="{Binding ShowCombo, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent},Converter={local:TBoolToVisibilityConverter}}"
                              Grid.ColumnSpan="2" 
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource ComboBoxToggleButton}"/>

                <Grid>
                    <TextBox x:Name="PART_EditableTextBox" 
                             CaretBrush="{Binding CaretBrush, RelativeSource={RelativeSource TemplatedParent}}"
                         Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Margin="{TemplateBinding Padding}" 
                         Style="{StaticResource ComboBoxEditableTextBox}" 
                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    <TextBlock Text="{TemplateBinding Placeholder}"
                               Name="PART_PlaceHolder"
                                           Margin="5,0,0,4"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Focusable="False"
                                           IsHitTestVisible="False"
                                           
                                           Foreground="{TemplateBinding Foreground}"
                                           Opacity="0.5"/>
                    <!--Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:TComboBox}},Path=Text,Converter={local:TTextLengthToVisibilityConverter Reverse=True}}"-->
                </Grid>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <!--<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>-->
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" 
                        TargetName="opaqueRect" 
                        Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left"
                        TargetName="opaqueRect" 
                        Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>